{"version":3,"sources":["exact-change.js"],"names":[],"mappings":"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","file":"exact-change-compiled.js","sourcesContent":["/**\n * Created by manishgiri on 7/26/16.\n */\n// Design a cash register drawer function checkCashRegister() that accepts purchase price as the first argument (price), payment as the second argument (cash), and cash-in-drawer (cid) as the third argument.\n//\n//     cid is a 2D array listing available currency.\n//\n//     Return the string \"Insufficient Funds\" if cash-in-drawer is less than the change due. Return the string \"Closed\" if cash-in-drawer is equal to the change due.\n//\n//     Otherwise, return change in coin and bills, sorted in highest to lowest order.\n//\n//     Remember to use Read-Search-Ask if you get stuck. Try to pair program. Write your own code.\n//\n\n\n//create a drawer object that will hold currency & amount in drawer\nvar drawer = {};\n\nvar currencyArray = [\n    [\"ONE HUNDRED\", 100.00], [\"TWENTY\", 20.00], [\"TEN\", 10.00], [\"FIVE\", 5.00], [\"ONE\", 1.00], [\"QUARTER\", 0.25],\n    [\"DIME\", 0.10], [\"NICKEL\", 0.05], [\"PENNY\", 0.01]\n];\n\n/**\n * given a cash amount, find and return the largest available currency that can be used to return the change\n * @param cash\n * @returns {*}\n */\nfunction findLargestCurrency(cash){\n    var largestCurrency = \"\";\n    for(let i = 0; i < currencyArray.length; i++) {\n        if(currencyArray[i][1] > cash) {\n            continue;\n        }\n        if(cash >= currencyArray[i][1]) {\n            largestCurrency = currencyArray[i][0];\n            return largestCurrency;\n\n        }\n    }\n    return largestCurrency;\n\n}\n\n/**\n * Given a currency, return the amount of that currency available in drawer\n * @param currency\n */\nfunction amountAvailable(currency) {\n    var amount = 0;\n    for(let prop in drawer) {\n        if(prop === currency) {\n            amount = drawer[prop];\n        }\n    }\n    return amount;\n\n}\n\n\n/**\n * Given a currency, it's available amount and total change to return, find out how much\n * of cash of that currency you can use\n * @param available\n * @param price\n * @param currency\n * @returns {number}\n */\n\nfunction amountOfCurrencyToUse(available, price, currency) {\n    let amountOfCurrencyUsed = 0;\n\n    while(price >= currency && available >= currency) {\n\n        amountOfCurrencyUsed += currency;\n        price -= currency;\n        // if(currency === 0.01) {\n        //     price = Math.round(price);\n        // }\n        //available -= amountOfCurrencyUsed;\n        price = Math.round(price * 100) / 100;\n        available -= currency;\n        available = Math.round(available * 100) / 100;\n    }\n\n    if(price === 0 && available === 0) {\n        return \"Closed\";\n    }\n\n    if(available < currency && currency == 0.01) {\n        return \"Insufficient Funds\";\n    }\n\n\n\n    return amountOfCurrencyUsed;\n}\n\n\nfunction checkCashRegister(price, cash, cid) {\n    var change;\n    // Here is your change, ma'am.\n    //step 1 - find difference between price n cash\n    var difference = cash - price;\n\n    //step 2 - find largest usable currency\n    var largestCurr = findLargestCurrency(difference);\n    console.log(\"Largest currency \" + largestCurr);\n\n    //fill up the drawer object\n    for(let i = 0; i < cid.length; i++) {\n        drawer[cid[i][0]] = cid[i][1];\n    }\n    console.log(drawer);\n\n    //console.log(\"Total amount in drawer = \" + cashInDrawer());\n\n    var amountOfLargestCurrency = amountAvailable(largestCurr);\n\n    //find position of largest currency in currencyArray\n    var largestCurrencyPos = 0;\n    for(let i = 0; i < currencyArray.length; i++) {\n        if(largestCurr === currencyArray[i][0]) {\n            largestCurrencyPos = i;\n            break;\n        }\n    }\n\n    console.log(\"Largest currency \" + largestCurr + \" is at position \" + largestCurrencyPos + \" in currencyArr\");\n    change = [];\n    for(let i = largestCurrencyPos; i < currencyArray.length; i++) {\n        largestCurr = currencyArray[i][0];\n        amountOfLargestCurrency = amountAvailable(largestCurr);\n\n        //largest currency is not sufficient -\n        //get amount added through current currency, subtract from cash to return and add to change\n        let amountToUse = amountOfCurrencyToUse(amountOfLargestCurrency, difference, currencyArray[i][1]);\n\n        if(amountToUse === \"Closed\") {\n            change = \"Closed\";\n        }\n\n        if(amountToUse === \"Insufficient Funds\") {\n            change = \"Insufficient Funds\";\n        }\n\n        else if(typeof amountToUse !== \"string\" && amountToUse !== 0) {\n            let tempArr = [];\n            tempArr.push(largestCurr);\n            tempArr.push(amountToUse);\n            change.push(tempArr);\n            difference -= amountToUse;\n        }\n\n    }\n\n    console.log(\"FINAL RESULT = \" + change);\n    return change;\n}\n\n// Example cash-in-drawer array:\n// [[\"PENNY\", 1.01],\n// [\"NICKEL\", 2.05],\n// [\"DIME\", 3.10],\n// [\"QUARTER\", 4.25],\n// [\"ONE\", 90.00],\n// [\"FIVE\", 55.00],\n// [\"TEN\", 20.00],\n// [\"TWENTY\", 60.00],\n// [\"ONE HUNDRED\", 100.00]]\n\n//checkCashRegister(19.50, 20.00, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.10], [\"QUARTER\", 4.25], [\"ONE\", 90.00], [\"FIVE\", 55.00], [\"TEN\", 20.00], [\"TWENTY\", 60.00], [\"ONE HUNDRED\", 100.00]]);\ncheckCashRegister(3.26, 100.00, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.10], [\"QUARTER\", 4.25], [\"ONE\", 90.00], [\"FIVE\", 55.00], [\"TEN\", 20.00], [\"TWENTY\", 60.00], [\"ONE HUNDRED\", 100.00]]);\n//checkCashRegister(19.50, 20.00, [[\"PENNY\", 0.01], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]);\n//checkCashRegister(19.50, 20.00, [[\"PENNY\", 0.50], [\"NICKEL\", 0], [\"DIME\", 0], [\"QUARTER\", 0], [\"ONE\", 0], [\"FIVE\", 0], [\"TEN\", 0], [\"TWENTY\", 0], [\"ONE HUNDRED\", 0]]);\n"]}