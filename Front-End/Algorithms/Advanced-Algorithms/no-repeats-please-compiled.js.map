{"version":3,"sources":["no-repeats-please.js"],"names":[],"mappings":";;AAAA;;;AAGA;;;;;;;;;;;;;;;AAeA;;;;;;;AAOA;;;;;;;;;;;;;AAcA,IAAI,QAAQ,EAAZ;;AAEA,SAAS,IAAT,CAAc,KAAd,EAAqB,IAArB,EAA2B,IAA3B,EAAiC;AAC7B,QAAI,OAAO,MAAM,IAAN,CAAX;AACA,UAAM,IAAN,IAAc,MAAM,IAAN,CAAd;AACA,UAAM,IAAN,IAAc,IAAd;AACH;;AAED,SAAS,OAAT,CAAiB,GAAjB,EAAsB,CAAtB,EAAyB;AACrB,QAAI,KAAK,IAAI,MAAb;AACA,QAAG,MAAM,CAAT,EAAY;AACR;AACA,cAAM,IAAN,CAAW,IAAI,IAAJ,CAAS,EAAT,CAAX;AAEH,KAJD,MAKK;AACD,aAAI,IAAI,IAAI,CAAZ,EAAe,KAAK,CAApB,EAAwB,GAAxB,EAA6B;;AAEzB,oBAAQ,GAAR,EAAa,IAAE,CAAf;AACA;AACA;AACA,gBAAG,IAAI,CAAP,EAAU;AACN,oBAAI,IAAI,CAAR;AACH,aAFD,MAGK;AACD;AACA,oBAAI,IAAI,CAAR;AACH;;AAED,iBAAK,GAAL,EAAU,IAAI,CAAd,EAAiB,IAAI,CAArB;AAEH;AAEJ;;AAED;AACH;;AAGD,SAAS,SAAT,CAAmB,GAAnB,EAAwB;AACpB,YAAQ,EAAR,CADoB,CACR;AACZ,QAAI,aAAa,IAAI,KAAJ,CAAU,EAAV,CAAjB;AACA,YAAQ,UAAR;AACA,QAAI,SAAS,CAAb;AACA,SAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,MAAM,MAAzB,EAAiC,GAAjC,EAAsC;AAClC,YAAG,MAAM,CAAN,EAAS,KAAT,CAAe,IAAI,MAAJ,CAAW,YAAX,CAAf,MAA6C,IAAhD,EAAsD;AAClD;AACH;AACJ;;AAED,YAAQ,GAAR,CAAY,WAAW,GAAX,GAAiB,YAAjB,GAAgC,MAA5C;AACA,YAAQ,GAAR,CAAY,gBAAZ;AACA,WAAO,MAAP;AAEH;;AAED,UAAU,KAAV;AACA,UAAU,KAAV;AACA,UAAU,MAAV;AACA,UAAU,SAAV;AACA,UAAU,SAAV;AACA,UAAU,OAAV","file":"no-repeats-please-compiled.js","sourcesContent":["/**\n * Created by manishgiri on 7/29/16.\n */\n/*\nNo repeats please\nReturn the number of total permutations of the provided string that don't have repeated consecutive letters. Assume that all characters in the provided string are each unique.\n\nFor example, aab should return 2 because it has 6 total permutations (aab, aab, aba, aba, baa, baa), but only 2 of them (aba and aba) don't have the same letter (in this case a) repeating.\n\nRemember to use Read-Search-Ask if you get stuck. Try to pair program. Write your own code.\n\n    Here are some helpful links:\n\n    Permutations\nRegExp\nRun tests (ctrl + enter)\nReset\t  Help\t  Bug*/\n\n/**\n * Your output will go here.\n * Any console.log() -type\n * statements will appear in\n * your browser's DevTools\n * JavaScript console as well.\n */\n/*\npermAlone(\"aab\") should return a number.\npermAlone(\"aab\") should return 2.\npermAlone(\"aaa\") should return 0.\npermAlone(\"aabb\") should return 8.\npermAlone(\"abcdefa\") should return 3600.\npermAlone(\"abfdefa\") should return 2640.\npermAlone(\"zzzzzzzz\") should return 0.\npermAlone(\"a\") should return 1.\npermAlone(\"aaab\") should return 0.\npermAlone(\"aaabb\") should return 12.\n*/\n\n\nvar perms = [];\n\nfunction swap(array, pos1, pos2) {\n    var temp = array[pos1];\n    array[pos1] = array[pos2];\n    array[pos2] = temp;\n}\n\nfunction heapify(arr, n) {\n    n = n || arr.length;\n    if(n === 1) {\n        //console.log(arr);\n        perms.push(arr.join(''));\n\n    }\n    else {\n        for(var i = 1; i <= n ; i++) {\n\n            heapify(arr, n-1);\n            //logic to swap based on heap's algo\n            //if n is odd - switch first and last\n            if(n % 2) {\n                var j = 1;\n            }\n            else {\n                //if n is even, switch i and last\n                var j = i;\n            }\n\n            swap(arr, j - 1, n - 1);\n\n        }\n\n    }\n\n    //console.log(\"Final = \" + perms);\n}\n\n\nfunction permAlone(str) {\n    perms = []; //reset global array before start of each test\n    var strLetters = str.split('');\n    heapify(strLetters);\n    var result = 0;\n    for(let i = 0; i < perms.length; i++) {\n        if(perms[i].match(new RegExp(\"([a-z])\\\\1\")) === null) {\n            result ++;\n        }\n    }\n\n    console.log(\"Str = \" + str + \", Match = \" + result);\n    console.log(\"--------------\");\n    return result;\n\n}\n\npermAlone('aab');\npermAlone(\"aaa\");\npermAlone(\"aabb\");\npermAlone(\"abcdefa\");\npermAlone(\"abfdefa\");\npermAlone(\"aaabb\");\n"]}