{"version":3,"sources":["13.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeA,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB,MAAI,QAAQ,IAAI,CAAJ,EAAO,WAAP,EAAZ;AACA,MAAI,SAAS,IAAI,CAAJ,EAAO,WAAP,EAAb;AACA,OAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,OAAO,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,QAAG,MAAM,OAAN,CAAc,OAAO,CAAP,CAAd,KAA4B,CAAC,CAAhC,EAAmC;AACjC,aAAO,KAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAED,SAAS,CAAC,OAAD,EAAU,KAAV,CAAT","file":"13-compiled.js","sourcesContent":["/*Bonfire: Mutations\nReturn true if the string in the first element of the array contains all of the letters of the string in the second element of the array.\n\nFor example, [\"hello\", \"Hello\"], should return true because all of the letters in the second string are present in the first, ignoring case.\n\nThe arguments [\"hello\", \"hey\"] should return false because the string \"hello\" does not contain a \"y\".\n\nLastly, [\"Alien\", \"line\"], should return true because all of the letters in \"line\" are present in \"Alien\".\n\nRemember to use Read-Search-Ask if you get stuck. Write your own code.\n\nHere are some helpful links:\n\nArray.indexOf()*/\n\nfunction mutation(arr) {\n  var first = arr[0].toLowerCase();\n  var second = arr[1].toLowerCase();\n  for(var i = 0; i < second.length; i++) {\n    if(first.indexOf(second[i]) == -1) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmutation([\"hello\", \"hey\"]);\n\n"]}