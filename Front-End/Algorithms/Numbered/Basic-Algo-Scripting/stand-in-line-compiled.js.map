{"version":3,"sources":["stand-in-line.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,QAAQ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAZ;;AAEA,SAAS,KAAT,CAAe,GAAf,EAAoB,IAApB,EAA0B;AACxB;AACA,MAAI,IAAJ,CAAS,IAAT;AACA,SAAO,IAAI,KAAJ,EAAP,CAHwB,CAGH;AACtB;;AAED;AACA,QAAQ,GAAR,CAAY,aAAa,KAAK,SAAL,CAAe,KAAf,CAAzB;AACA,QAAQ,GAAR,CAAY,MAAM,KAAN,EAAa,CAAb,CAAZ,E,CAA8B;AAC9B,QAAQ,GAAR,CAAY,YAAY,KAAK,SAAL,CAAe,KAAf,CAAxB","file":"stand-in-line-compiled.js","sourcesContent":["// Bonfire: Stand in Line\n// In Computer Science a queue is an abstract Data Structure where items are kept in order. New items can be added at the back of the queue and old items are taken off from the front of the queue.\n\n// Write a function queue which takes an \"array\" and an \"item\" as arguments. Add the item onto the end of the array, then remove and return the item at the front of the queue.\n\n//   Run tests (ctrl + enter)\n//   Reset\t  Help\t  Bug\n\n// /**\n//   * Your output will go here.\n//   * Console.log() -type statements\n//   * will appear in your browser's\n//   * DevTools JavaScript console.\n//   */\n\n// queue([], 1) should return 1\n// queue([2], 1) should return 2\n// After queue(myArr, 10), myArr[4] should be 10\n\n// Setup\nvar myArr = [1,2,3,4,5];\n\nfunction queue(arr, item) {\n  // Your code here\n  arr.push(item);\n  return arr.shift();  // Change this line\n}\n\n// Display Code\nconsole.log(\"Before: \" + JSON.stringify(myArr));\nconsole.log(queue(myArr, 6)); // Modify this line to test\nconsole.log(\"After: \" + JSON.stringify(myArr));\n"]}