{"version":3,"sources":["10.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAS,KAAT,CAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B,EAAiC;AAChC,KAAI,eAAe,EAAnB;AACA,MAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,UAAU,MAA7B,EAAqC,GAArC,EAA0C;AACzC,eAAa,IAAb,CAAkB,UAAU,CAAV,CAAlB;AACA;;AAED,SAAQ,GAAR,CAAY,YAAZ;AACA,KAAI,SAAS,EAAb;AACA,MAAI,IAAI,CAAR,EAAW,IAAI,aAAa,MAA5B,EAAoC,GAApC,EAAyC;AACxC,eAAa,CAAb,EAAgB,OAAhB,CAAwB,UAAS,GAAT,EAAc;AACrC,OAAG,CAAE,OAAO,QAAP,CAAgB,GAAhB,CAAL,EAA2B;AAC1B,WAAO,IAAP,CAAY,GAAZ;AACA;AACD,GAJD;AAKA;AACD,SAAQ,GAAR,CAAY,MAAZ;AACC,QAAO,MAAP;AACD;;AAED,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAN,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAjB,EAA+B,CAAC,CAAD,EAAI,CAAJ,CAA/B","file":"10-compiled.js","sourcesContent":["// Bonfire: Sorted Union\r\n// Write a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arrays.\r\n\r\n// In other words, all values present from all arrays should be included in their original order, but with no duplicates in the final array.\r\n\r\n// The unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.\r\n\r\n// Check the assertion tests for examples.\r\n\r\n// Remember to use Read-Search-Ask if you get stuck. Try to pair program. Write your own code.\r\n\r\n// Here are some helpful links:\r\n\r\n// Arguments object\r\n// Array.reduce()\r\n//   Run tests (ctrl + enter)\r\n//   Reset\t  Help\t  Bug\r\n\r\n// /**\r\n//   * Your output will go here.\r\n//   * Console.log() -type statements\r\n//   * will appear in your browser's\r\n//   * DevTools JavaScript console.\r\n//   */\r\n\r\n// unite([1, 3, 2], [5, 2, 1, 4], [2, 1]) should return [1, 3, 2, 5, 4].\r\n// unite([1, 3, 2], [1, [5]], [2, [4]]) should return [1, 3, 2, [5], [4]].\r\n// unite([1, 2, 3], [5, 2, 1]) should return [1, 2, 3, 5].\r\n// unite([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8]) should return [1, 2, 3, 5, 4, 6, 7, 8].\r\n\r\nfunction unite(arr1, arr2, arr3) {\r\n\tvar combinedArgs = [];\r\n\tfor(var i = 0; i < arguments.length; i++) {\r\n\t\tcombinedArgs.push(arguments[i]);\r\n\t}\r\n\r\n\tconsole.log(combinedArgs);\r\n\tvar result = [];\r\n\tfor(i = 0; i < combinedArgs.length; i++) {\r\n\t\tcombinedArgs[i].forEach(function(val) {\r\n\t\t\tif(! result.includes(val)) {\r\n\t\t\t\tresult.push(val);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tconsole.log(result);\r\n  return result;\r\n}\r\n\r\nunite([1, 3, 2], [5, 2, 1, 4], [2, 1]);\r\n"]}