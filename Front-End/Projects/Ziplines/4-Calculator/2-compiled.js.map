{"version":3,"sources":["2.js"],"names":[],"mappings":"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","file":"2-compiled.js","sourcesContent":["//global variables and functions\r\nvar $display = $(\"#calculator-display\");\r\nvar result = 0;\r\nvar entries = [];\r\nvar lastNum = 0;\r\nvar currentNum = 0; //at any point this number is in memory if no number is pressed\r\nvar currentNumDisplay = \"\";\r\nvar currentOp = '';\r\nvar periodicNumber = [];\r\nvar decimals = [];\r\n\r\nfunction decimalCheck(num) {\r\n    var answer = 0;\r\n    if(num % 1 !== 0) {\r\n            answer = num.toFixed(10);\r\n    }\r\n    else {\r\n            answer = num;\r\n    }\r\n\r\n    return answer;\r\n\r\n}\r\n\r\nfunction calculate(num1, op, num2) {\r\n    var result,temp = 0;\r\n    if (op === \"+\") {\r\n        result = decimalCheck(num1 + num2);\r\n    } \r\n\r\n    else if (op === \"-\") {\r\n        result = decimalCheck(num1 - num2);\r\n    } \r\n\r\n    else if (op === \"*\") {\r\n        result = decimalCheck(num1 * num2);\r\n    } \r\n\r\n    else if (op === \"/\") {\r\n        if(num2 !== 0) {\r\n            result = decimalCheck(num1 / num2);\r\n        }\r\n    } \r\n\r\n    else if (op === \"sqrt\") {\r\n        if (num1 >= 0) {\r\n            result = decimalCheck(Math.sqrt(num1));\r\n        }\r\n    }\r\n\r\n    else if(op === \"%\") {\r\n        result = num1 % num2;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n$(\".table-cell\").click(function () {\r\n    //$display.html($(this).text());\r\n    var $this = $(this);\r\n\r\n    //if button clicked was a number\r\n    if ($this.hasClass(\"number\")) {\r\n        currentNum = parseInt($this.text(), 10);\r\n        \r\n        //check if last entry in entries[] is also a number\r\n        if ($.isNumeric(entries[entries.length - 1])) {\r\n            //remove last number from entries\r\n            lastNum = entries.pop();\r\n\r\n\r\n            //get last entry in entries, combine with this number, update currentNum, currentNumDisplay and display on screen\r\n            currentNumDisplay = lastNum.toString() + currentNum;\r\n            currentNum = parseFloat(currentNumDisplay, 10);\r\n            entries.push(currentNum);\r\n            console.log(\"----\");\r\n            console.log(\"Entries = \" + entries);\r\n            console.log(\"----\");\r\n            $display.html(currentNumDisplay);\r\n\r\n\r\n        } \r\n\r\n        //check if last entry in entries[] is \".\"\r\n        else if(entries[entries.length-1] == \".\"){\r\n            //last entry in entries is a dot\r\n            //remove '.'\r\n            entries.pop();\r\n            //remove last number in entries\r\n            lastNum = entries.pop();\r\n            //prepare formatted number\r\n            currentNumDisplay = lastNum + \".\" + currentNum;\r\n            //get formatted number to store in entries\r\n            currentNum = parseFloat(currentNumDisplay, 10);\r\n            entries.push(currentNum);\r\n            console.log(\"----\");\r\n            console.log(\"Entries = \" + entries);\r\n            console.log(\"----\");\r\n            $display.html(currentNumDisplay);            \r\n        }\r\n\r\n        //check if last entry in entries[] is \"..\"\r\n        else if(entries[entries.length-1] == \"..\") {\r\n            //remove \"..\" from entries\r\n            entries.pop();\r\n            lastNum = 0;\r\n            currentNumDisplay = lastNum + \".\" + currentNum;\r\n            currentNum = parseFloat(currentNumDisplay);\r\n            entries.push(currentNum);\r\n            console.log(\"----\");\r\n            console.log(\"Entries = \" + entries);\r\n            console.log(\"----\");\r\n            $display.html(currentNumDisplay);\r\n        }\r\n\r\n        else {\r\n            //if last entry in entries[] is not a number, it must be an operator\r\n            entries.push(currentNum);\r\n            console.log(\"----\");\r\n            console.log(\"Entries = \" + entries);\r\n            console.log(\"----\");\r\n            $display.html(currentNum);\r\n        }\r\n    }\r\n\r\n    //else if button clicked was an operator\r\n    else if ($this.hasClass(\"op\")) {\r\n\r\n        currentOp = $this.text();\r\n        console.log(\"Current Op => \" + currentOp);\r\n\r\n        /*----------------------------------------------------\r\n        check if the operator was a null operator AC|CE|=\r\n        -----------------------------------------------------*/\r\n        if ($this.hasClass(\"null-op\")) {\r\n\r\n            //check if operator was an 'AC'\r\n            if (currentOp === \"AC\") {\r\n                //console.log(\"Inside if loop, Current Op = \" + currentOp);\r\n                //clear entries array\r\n                entries = [];\r\n                console.log(\"----\");\r\n                console.log(\"Entries = \" + entries);\r\n                console.log(\"----\");\r\n                //clear screen display\r\n                $display.html(\"\");\r\n                //clear currentNum, currentOp\r\n                currentNum = 0;\r\n                currentOp = '';\r\n            }\r\n\r\n\r\n            //check if operator was a 'CE' \r\n            else if (currentOp === \"CE\") {\r\n                //if last entry in entries is a number\r\n                if ($.isNumeric(entries[entries.length - 1])) {\r\n                    //remove last number from entries\r\n                    entries.pop();\r\n                    //also remove last operator from entries\r\n                    entries.pop();\r\n                    console.log(\"----\");\r\n                    console.log(\"Entries = \" + entries);\r\n                    console.log(\"----\");\r\n                    //reset currentOp,currentNum\r\n                    currentNum = 0;\r\n                    currentOp = '';\r\n                }\r\n                //if last entry in entries was not a number\r\n                else {\r\n                    //last entry is an operator, remove it\r\n                    entries.pop();\r\n                    console.log(\"----\");\r\n                    console.log(\"Entries = \" + entries);\r\n                    console.log(\"----\");                    \r\n                    //reset currentOp,currentNum\r\n                    currentNum = 0;\r\n                    currentOp = '';\r\n\r\n                }\r\n            }\r\n\r\n            //check if operator was an '='\r\n            else if (currentOp === \"=\") {\r\n                //calculate result from entries\r\n                var temp = 0;\r\n                while(entries.length >= 3) {\r\n                    temp = calculate(entries[0], entries[1], entries[2]);\r\n                    entries.splice(0, 3, temp);\r\n                    console.log(\"----\");\r\n                    console.log(\"Entries = \" + entries);\r\n                    console.log(\"----\");                    \r\n                }\r\n                result = temp;\r\n                $display.html(result);\r\n                //reset entries & current op\r\n                currentOp = '';\r\n                entries = [];\r\n                console.log(\"Entries = \" + entries);\r\n\r\n            }\r\n        }\r\n\r\n\r\n        /*----------------------------------------------------\r\n          check if operator was a unary operator SQRT|.\r\n        -----------------------------------------------------*/\r\n        else if ($this.hasClass(\"unary-op\")) {\r\n\r\n            //check if operator was a sqrt\r\n            if ($this.hasClass(\"sqrt\")) {\r\n                //check if last entry in entries was a number\r\n                if ($.isNumeric(entries[entries.length - 1])) {\r\n                    //if yes, get last number in entries\r\n                    lastNum = entries[entries.length - 1];\r\n                    //compute result of square root\r\n                    result = calculate(lastNum, \"sqrt\", 0);\r\n                    //show result on screen\r\n                    $display.html(result);\r\n                    //reset everything\r\n                    entries = [];\r\n                    currentOp = '';\r\n                }\r\n\r\n                //if last entry was not a number\r\n                else {\r\n                    //discard the value of sqrt\r\n                    currentOp = '';\r\n                }\r\n            }\r\n\r\n            //check if operator was a dot\r\n            else if ($this.hasClass(\"dot\")) {\r\n                //check if last entry in entries was a number\r\n                if ($.isNumeric(entries[entries.length - 1])) {\r\n                        entries.push(\".\");           \r\n                }\r\n\r\n                //last entry in entries is not a number\r\n                else {\r\n                    entries.push(\"..\");               \r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        /*---------------------------------------------------------\r\n          check if the operator was a binary operator - +|-|*|/|%\r\n        ---------------------------------------------------------*/\r\n        else if ($this.hasClass(\"binary-op\")) {\r\n            //check if last entry in entries is a number\r\n            if ($.isNumeric(entries[entries.length - 1])) {\r\n                //get what operator was pushed\r\n                if($this.is(\"#add\")) {\r\n                    //if operator is +\r\n                    currentOp = '+';\r\n                    entries.push(currentOp);\r\n                    console.log(\"----\");\r\n                    console.log(\"Entries = \" + entries);\r\n                    console.log(\"----\");\r\n                    //clear currentOp\r\n                    currentOp = '';\r\n                }\r\n\r\n                //if operator is '-' \r\n                else if($this.is(\"#subtract\")) {\r\n                    //if operator is +\r\n                    currentOp = '-';\r\n                    entries.push(currentOp);\r\n                    console.log(\"----\");\r\n                    console.log(\"Entries = \" + entries);\r\n                    console.log(\"----\");\r\n                    //clear currentOp\r\n                    currentOp = '';\r\n                }\r\n\r\n                //if operator is '*'\r\n                else if($this.is(\"#multiply\")) {\r\n                    //if operator is +\r\n                    currentOp = '*';\r\n                    entries.push(currentOp);\r\n                    console.log(\"----\");\r\n                    console.log(\"Entries = \" + entries);\r\n                    console.log(\"----\");\r\n                    //clear currentOp\r\n                    currentOp = '';\r\n                }\r\n\r\n                //if operator is '/'\r\n                else if($this.is(\"#divide\")) {\r\n                    //if operator is +\r\n                    currentOp = '/';\r\n                    entries.push(currentOp);\r\n                    console.log(\"----\");\r\n                    console.log(\"Entries = \" + entries);\r\n                    console.log(\"----\");\r\n                    //clear currentOp\r\n                    currentOp = '';\r\n                }\r\n                else if($this.is(\"#percent\")) {\r\n                    //if operator is +\r\n                    currentOp = '%';\r\n                    entries.push(currentOp);\r\n                    console.log(\"----\");\r\n                    console.log(\"Entries = \" + entries);\r\n                    console.log(\"----\");\r\n                    //clear currentOp\r\n                    currentOp = '';\r\n                }\r\n\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n});\r\n"]}