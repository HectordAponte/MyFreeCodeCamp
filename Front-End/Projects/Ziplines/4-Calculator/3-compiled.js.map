{"version":3,"sources":["3.js"],"names":[],"mappings":"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","file":"3-compiled.js","sourcesContent":["//global variables and functions\n//var $display = $(\"#calculator-display\");\nvar result = 0;\nvar entries = [];\nvar lastNum = 0;\nvar currentNum = 0; //at any point this number is in memory if no number is pressed\nvar currentNumDisplay = \"\";\n\nvar currentOp = '';\nvar lastOp = '';\n\nvar oldResult = '';\n\n//to prevent multiple decimals in same number\nvar sameNumberDecimal = false;\n\n//new display variables\nvar $previousDisplay = $(\"#previousDisplay\");\nvar $presentDisplay = $(\"#currentDisplay\");\n\n\n//check number of decimals in a number\nNumber.prototype.countDecimals = function () {\n    if(Math.floor(this.valueOf()) === this.valueOf()) return 0;\n    return this.toString().split(\".\")[1].length || 0; \n}\n\nfunction decimalCheck(num) {\n    var answer = 0;\n    var numLength = num.toString();\n    //if 15 numbers or less in result\n        if(numLength <= 15) {\n            if (num % 1 !== 0 && num.countDecimals() >= 13) {\n            console.log(\"Num of decimals = \" + num.countDecimals());\n            //if #decimals > 15, fix it to 10 places\n            answer = num.toFixed(10);\n        } \n\n        else {\n            answer = num;\n        }\n    }\n\n    //else display error message\n    else {\n        $previousDisplay.html(\"\");\n        $previousDisplay.html('<b style=\"color:red;\">' + \"Invalid Operation</b>\");\n        answer = 0;\n    }\n\n    return answer;\n\n}\n\nfunction calculate(num1, op, num2) {\n    var result = 0;\n    if (op === \"+\") {\n        result = decimalCheck(num1 + num2);\n    } else if (op === \"-\") {\n        result = decimalCheck(num1 - num2);\n    } \n\n    else if (op === \"*\") {\n        result = decimalCheck(num1 * num2);\n    } \n\n    else if (op === \"/\") {\n        if (num2 !== 0) {\n            result = decimalCheck(num1 / num2);\n        }\n        else if(num2 === 0) {\n            console.log(\"Inside divide by zero loop\");\n\n             //$previousDisplay.html('<i style=\"font-size:0.7em;color:green;\">'+oldResult+\"</i>\");\n             $previousDisplay.html('<b style=\"font-size:0.5em;color:red;\">'+\"Invalid Operation\"+\"</b>\");\n             result = 0;\n        }\n    } \n\n    else if (op === \"sqrt\") {\n        if (num1 >= 0) {\n            result = decimalCheck(Math.sqrt(num1));\n        }\n    } \n\n    else if (op === \"%\") {\n        result = num1 % num2;\n    }\n\n    return result;\n}\n\n\n\n$(\".table-cell\").click(function () {\n    \n    var $this = $(this);\n\n    //if button clicked was a number\n    if ($this.hasClass(\"number\")) {\n        currentNum = parseInt($this.text(), 10);\n\n        //check if last entry in entries[] is also a number\n        lastNum = entries[entries.length - 1];\n        if ($.isNumeric(lastNum)) {\n            //number repition\n            //remove last number from entries\n\n            var lastNumS = lastNum.toString();\n\n            //if current number is of 14 or less digits\n            if(lastNumS.length <= 14) {\n\n                var last = entries.pop();\n                var lastS = last.toString();\n\n            //get last entry in entries, combine with this number, update currentNum, currentNumDisplay and display on screen\n            currentNumDisplay = lastS + currentNum;\n            currentNum = parseFloat(currentNumDisplay, 10);\n            \n            //do same thing for old result display\n            \n            entries.push(currentNum);\n            console.log(\"----\");\n            console.log(\"Entries = \" + entries);\n            oldResult = currentNumDisplay;   \n\n            //$previousDisplay.html('<i style=\"font-size:0.7em;color:green\">'+oldResult+\"</i><br>\");\n            $presentDisplay.html(currentNumDisplay);\n\n           // oldResult = currentNumDisplay;   \n            console.log(\"Old Result = \" + oldResult);\n            }\n\n\n        }\n\n        //check if last entry in entries[] is \".\"\n        else if (entries[entries.length - 1] == \".\") {\n            //last entry in entries is a dot\n            //remove '.'\n            entries.pop();\n            //remove last number in entries\n            lastNum = entries.pop();\n            //prepare formatted number\n            currentNumDisplay = lastNum + \".\" + currentNum;\n            //get formatted number to store in entries\n            currentNum = parseFloat(currentNumDisplay, 10);\n            entries.push(currentNum);\n            console.log(\"----\");\n            console.log(\"Entries = \" + entries);\n            //console.log(\"----\");\n            //$display.html(currentNumDisplay);\n            $presentDisplay.html(currentNumDisplay);\n\n        }\n\n\n        else {\n            //if last entry in entries[] is not a number, \n            //it must be an operator or a new number\n\n            entries.push(currentNum);\n            console.log(\"----\");\n            console.log(\"Entries = \" + entries);\n\n            $previousDisplay.html('<i style=\"font-size:0.7em;color:green;\">'+oldResult+\"</i>\");\n            $presentDisplay.html(currentNum);\n            oldResult += currentNum;\n            console.log(\"Old Result = \" + oldResult);\n        }\n    }\n\n    //else if button clicked was an operator\n    else if ($this.hasClass(\"op\")) {\n\n        currentOp = $this.text();\n        \n        oldResult += currentOp;\n        console.log(\"Current Op => \" + currentOp);\n\n        /*----------------------------------------------------\n        check if the operator was a null operator AC|CE|=\n        -----------------------------------------------------*/\n        if ($this.hasClass(\"null-op\")) {\n            //validation for decimal case\n            sameNumberDecimal = false;\n            //check if operator is an 'AC'\n            if (currentOp === \"AC\") {\n                //console.log(\"Inside if loop, Current Op = \" + currentOp);\n                //clear entries array\n                entries = [];\n                console.log(\"----\");\n                console.log(\"Entries = \" + entries);\n                //console.log(\"----\");\n                //clear screen display\n                //$display.html(\"\");\n                $previousDisplay.html(\"\");\n                $presentDisplay.html(\"\");\n\n                //clear currentNum, currentOp, oldresult\n                currentNum = 0;\n                currentOp = '';\n                oldResult = '';\n            }\n\n\n            //check if operator was a 'CE' \n            else if (currentOp === \"CE\") {\n                //if last entry in entries is a number\n                if ($.isNumeric(entries[entries.length - 1])) {\n                    //remove last number from entries\n                    entries.pop();\n                    //change - don't remove last operator from entries\n                    //entries.pop();\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n                    //console.log(\"----\");\n                    //reset currentOp,currentNum\n                    currentNum = 0;\n                    currentOp = '';\n                }\n                //if last entry in entries was not a number\n                else {\n                    //last entry is an operator, but don't remove it\n                    //entries.pop();\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n                    //console.log(\"----\");\n                    //reset currentOp,currentNum\n                    //currentNum = 0;\n                    currentOp = '';\n\n                }\n            }\n\n            //check if operator was an '='\n            else if (currentOp === \"=\") {\n                //calculate result from entries\n                var temp = 0;\n                while (entries.length >= 3) {\n                    temp = calculate(entries[0], entries[1], entries[2]);\n                    entries.splice(0, 3, temp);\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n                    console.log(\"----\");\n                }\n                result = temp;\n                //$display.html(result);\n               // $previousDisplay.html(\"\");\n                $presentDisplay.html(result);\n                //reset entries & current op\n                currentOp = '';\n                entries = [];\n                console.log(\"Entries = \" + entries);\n\n            }\n        }\n\n\n        /*----------------------------------------------------\n          check if operator was a unary operator SQRT|.\n        -----------------------------------------------------*/\n        else if ($this.hasClass(\"unary-op\")) {\n\n            //check if operator was a sqrt\n            if ($this.hasClass(\"sqrt\")) {\n                //validation for decimal case\n                sameNumberDecimal = false;\n                //check if last entry in entries was a number\n                if ($.isNumeric(entries[entries.length - 1])) {\n                    //if yes, get last number in entries\n                    lastNum = entries[entries.length - 1];\n                    //compute result of square root\n                    result = calculate(lastNum, \"sqrt\", 0);\n                    //show result on screen\n                    $previousDisplay.html('<i style=\"font-size:0.7em;color:green\">'+oldResult+\"</i><br>\");\n                    $presentDisplay.html(result);\n                    //reset everything\n                    entries = [];\n                    currentOp = '';\n                }\n\n                //if last entry was not a number\n                else {\n                    //discard the value of sqrt\n                    currentOp = '';\n                }\n            }\n\n            //check if operator was a dot\n            else if ($this.hasClass(\"dot\")) {\n                //check if last entry in entries was a number - only valid case\n                if ($.isNumeric(entries[entries.length - 1])) {\n                    console.log(\"Samenumberdecimal = \" + sameNumberDecimal);\n                    if(!sameNumberDecimal) {\n                        sameNumberDecimal = true;\n                        entries.push(\".\");                     \n                    }\n                    else {\n                    }\n                }\n\n                //else - last entry in entries is not a number - ignore\n\n            }\n        }\n\n        /*---------------------------------------------------------\n          check if the operator was a binary operator - +|-|*|/|%\n        ---------------------------------------------------------*/\n        else if ($this.hasClass(\"binary-op\")) {\n            \n                //validation for decimal case\n                sameNumberDecimal = false;\n\n            //check if last entry in entries is a number\n\n            if ($.isNumeric(entries[entries.length - 1])) {\n                //get what operator was pushed\n                if ($this.is(\"#add\")) {\n                    //if operator is +\n                    currentOp = '+';\n                    entries.push(currentOp);\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n\n                    //changes for new displays\n                    $previousDisplay.html('<i style=\"font-size:0.7em; color:green\">'+oldResult+\"</i>\");\n                    console.log(\"Old Result = \" + oldResult);\n                    //clear currentOp\n                    currentOp = '';\n                }\n\n                //if operator is '-' \n                else if ($this.is(\"#subtract\")) {\n                    //if operator is +\n                    currentOp = '-';\n                    entries.push(currentOp);\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n                    //console.log(\"----\");\n                    //changes for new displays\n                    $previousDisplay.html('<i style=\"font-size:0.7em; color:green\">'+oldResult+\"</i>\");\n                    console.log(\"Old Result = \" + oldResult);                    \n                    //clear currentOp\n                    currentOp = '';\n                }\n\n                //if operator is '*'\n                else if ($this.is(\"#multiply\")) {\n                    //if operator is +\n                    currentOp = '*';\n                    entries.push(currentOp);\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n                    //console.log(\"----\");\n                                        //changes for new displays\n                    $previousDisplay.html('<i style=\"font-size:0.7em; color:green\">'+oldResult+\"</i>\");\n                    console.log(\"Old Result = \" + oldResult);\n                    //clear currentOp\n                    currentOp = '';\n                }\n\n                //if operator is '/'\n                else if ($this.is(\"#divide\")) {\n                    //if operator is +\n                    currentOp = '/';\n                    entries.push(currentOp);\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n                   // console.log(\"----\");\n                                       //changes for new displays\n                    $previousDisplay.html('<i style=\"font-size:0.7em; color:green\">'+oldResult+\"</i>\");\n                    console.log(\"Old Result = \" + oldResult);\n                    //clear currentOp\n                    currentOp = '';\n                } \n\n                else if ($this.is(\"#percent\")) {\n                    //if operator is +\n                    currentOp = '%';\n                    entries.push(currentOp);\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n                    //console.log(\"----\");\n                    //changes for new displays\n                    $previousDisplay.html('<i style=\"font-size:0.7em; color:green\">'+oldResult+\"</i>\");\n                    console.log(\"Old Result = \" + oldResult);\n                    //clear currentOp\n                    currentOp = '';\n                }\n\n\n            }\n\n            //else last entry in entries is not a number\n            else {\n\n                //last entry is an operator, pop it\n                lastOp = entries.pop();\n                if ($this.is(\"#add\")) {\n                    //if operator is +\n                    currentOp = '+';\n                    entries.push(currentOp);\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n\n                    //changes for new displays\n                    //$previousDisplay.html('<i style=\"font-size:0.7em; color:green\">'+oldResult+\"</i>\");\n                    console.log(\"Old Result = \" + oldResult);\n                    //clear currentOp\n                    currentOp = '';\n                }\n\n                //if operator is '-' \n                else if ($this.is(\"#subtract\")) {\n                    //if operator is +\n                    currentOp = '-';\n                    entries.push(currentOp);\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n                    //console.log(\"----\");\n                    //changes for new displays\n                    //$previousDisplay.html('<i style=\"font-size:0.7em; color:green\">'+oldResult+\"</i>\");\n                    console.log(\"Old Result = \" + oldResult);                    \n                    //clear currentOp\n                    currentOp = '';\n                }\n\n                //if operator is '*'\n                else if ($this.is(\"#multiply\")) {\n                    //if operator is +\n                    currentOp = '*';\n                    entries.push(currentOp);\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n                    //console.log(\"----\");\n                    //changes for new displays\n                    //$previousDisplay.html('<i style=\"font-size:0.7em; color:green\">'+oldResult+\"</i>\");\n                    console.log(\"Old Result = \" + oldResult);\n                    //clear currentOp\n                    currentOp = '';\n                }\n\n                //if operator is '/'\n                else if ($this.is(\"#divide\")) {\n                    //if operator is +\n                    currentOp = '/';\n                    entries.push(currentOp);\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n                   // console.log(\"----\");\n                                       //changes for new displays\n                    //$previousDisplay.html('<i style=\"font-size:0.7em; color:green\">'+oldResult+\"</i>\");\n                    console.log(\"Old Result = \" + oldResult);\n                    //clear currentOp\n                    currentOp = '';\n                } \n\n                else if ($this.is(\"#percent\")) {\n                    //if operator is +\n                    currentOp = '%';\n                    entries.push(currentOp);\n                    console.log(\"----\");\n                    console.log(\"Entries = \" + entries);\n                    //console.log(\"----\");\n                    //changes for new displays\n                   // $previousDisplay.html('<i style=\"font-size:0.7em; color:green\">'+oldResult+\"</i>\");\n                    console.log(\"Old Result = \" + oldResult);\n                    //clear currentOp\n                    currentOp = '';\n                }\n\n            }\n\n        }\n    }\n\n\n\n\n});\n"]}