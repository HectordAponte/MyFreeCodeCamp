{"version":3,"sources":["4.js"],"names":[],"mappings":"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","file":"4-compiled.js","sourcesContent":["//global variables and functions\r\n\r\nvar result = 0;\r\nvar entries = [];\r\nvar lastNum = 0;\r\nvar currentNum = 0; //at any point this number is in memory if no number is pressed\r\nvar currentNumDisplay = \"\";\r\n\r\nvar currentOp = '';\r\nvar lastOp = '';\r\n\r\nvar oldResult = '';\r\n\r\n//to prevent multiple decimals in same number\r\nvar sameNumberDecimal = false;\r\n\r\n//new display variables\r\nvar $previousDisplay = $(\"#previousDisplay\");\r\nvar $presentDisplay = $(\"#currentDisplay\");\r\n\r\n\r\n\r\n//check number of decimals in a number\r\nNumber.prototype.countDecimals = function () {\r\n    if(Math.floor(this.valueOf()) === this.valueOf()) return 0;\r\n    return this.toString().split(\".\")[1].length || 0; \r\n}\r\n\r\nfunction showMessage(character, message) {\r\n    if(character) {\r\n        $previousDisplay.html('<i style=\"font-size:0.6em; color:#BADCF3\">'+oldResult+\"</i>\");\r\n    }\r\n    else if(!character) {\r\n        $previousDisplay.html(\"\");\r\n        $previousDisplay.html('<i style=\"color:red;font-size:0.5em;\">' + message +\"</i>\");\r\n    }\r\n}\r\n\r\n\r\nfunction resultCheck(num) {\r\n    var answer = 0;\r\n\r\n    //get length of number itself\r\n    var numberLength = num.toString().length;\r\n    console.log(\"Number Length = \" + numberLength);\r\n\r\n    //CASE 1 - total 15 numbers on screen\r\n    if(numberLength <= 15) {\r\n\r\n        //if number of digits after decimal >= 13, fix to 10\r\n        if(num % 1 !== 0 && num.countDecimals >= 13) {\r\n            console.log(\"Num of decimals = \" + num.countDecimals);\r\n            showMessage(false, \"Result truncated\");\r\n            answer = num.toFixed(10);\r\n\r\n        }\r\n        else {\r\n            answer = num;\r\n        }\r\n\r\n    }\r\n\r\n    //CASE 2 - more than 15 numbers on screen\r\n    else if(numberLength > 15) {\r\n\r\n        //check if decimals exists\r\n        if(num % 1 !== 0) {\r\n            var decimalDigits = num.countDecimals();\r\n            var preDecimalDigits = numberLength - decimalDigits;\r\n\r\n            if(preDecimalDigits <= 5 && decimalDigits >= 11) {\r\n                console.log(\"Inside else 1\");\r\n                showMessage(false, \"Result truncated\");\r\n                answer = num.toFixed(10);\r\n            }\r\n            \r\n            else if(preDecimalDigits >= 11 && decimalDigits >= 4) {\r\n                console.log(\"Inside else 2\");\r\n                answer = num.toFixed(3);\r\n            }\r\n            else if(5 < preDecimalDigits <= 11 && decimalDigits < 4) {\r\n                console.log(\"Inside else 3\");\r\n                answer = num;\r\n            }\r\n        }\r\n\r\n        else {\r\n            //no decimal places\r\n            console.log(\"Inside else 4\");\r\n            showMessage(false, \"Result too large\");\r\n            answer = 0;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return answer;\r\n}\r\n\r\n\r\nfunction calculate(num1, op, num2) {\r\n    var result = 0;\r\n    if (op === \"+\") {\r\n        result = resultCheck(num1 + num2);\r\n    } else if (op === \"-\") {\r\n        result = resultCheck(num1 - num2);\r\n    } \r\n\r\n    else if (op === \"*\") {\r\n        result = resultCheck(num1 * num2);\r\n    } \r\n\r\n    else if (op === \"/\") {\r\n        if (num2 !== 0) {\r\n            result = resultCheck(num1 / num2);\r\n        }\r\n        else if(num2 === 0) {\r\n            console.log(\"Inside divide by zero loop\");\r\n            showMessage(false, \"Divide by Zero\");\r\n\r\n            //$previousDisplay.html('<i style=\"font-size:0.7em;color:green;\">'+oldResult+\"</i>\");\r\n             //$previousDisplay.html('<b style=\"font-size:0.5em;color:red;\">'+\"Invalid Operation\"+\"</b>\");\r\n             result = 0;\r\n        }\r\n    } \r\n\r\n    else if (op === \"sqrt\") {\r\n        if (num1 >= 0) {\r\n            result = resultCheck(Math.sqrt(num1));\r\n        }\r\n        else {\r\n            showMessage(false, \"Invalid Number\");\r\n            result = 0;\r\n        }\r\n    } \r\n\r\n    else if (op === \"%\") {\r\n        if(num2 !== 0) {\r\n            result = num1 % num2;\r\n        }\r\n        else {\r\n            showMessage(false, \"Invalid Number\");\r\n            result = 0;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\nfunction pushOperator(oper) {\r\n    currentOp = oper;\r\n    entries.push(currentOp);\r\n    console.log(\"----\");\r\n    console.log(\"Entries = \" + entries);\r\n\r\n    //changes for new displays\r\n    showMessage(true, \"\");\r\n    //$previousDisplay.html('<i style=\"font-size:0.7em; color:#BADCF3\">'+oldResult+\"</i>\");\r\n    console.log(\"Old Result = \" + oldResult);\r\n    //clear currentOp\r\n    currentOp = '';\r\n\r\n}\r\n\r\n\r\n$(\".table-cell\").click(function () {\r\n    \r\n    var $this = $(this);\r\n\r\n    //if button clicked was a number\r\n    if ($this.hasClass(\"number\")) {\r\n        currentNum = parseInt($this.text(), 10);\r\n\r\n        //check if last entry in entries[] is also a number\r\n        lastNum = entries[entries.length - 1];\r\n        if ($.isNumeric(lastNum)) {\r\n            //number repition\r\n            //remove last number from entries\r\n\r\n            var lastNumS = lastNum.toString();\r\n\r\n            //if current number is of 14 or less digits\r\n            if(lastNumS.length <= 14) {\r\n\r\n                var last = entries.pop();\r\n                var lastS = last.toString();\r\n\r\n                //get last entry in entries, combine with this number, update currentNum, currentNumDisplay and display on screen\r\n                currentNumDisplay = lastS + currentNum;\r\n                currentNum = parseFloat(currentNumDisplay, 10);\r\n                \r\n                //do same thing for old result display\r\n                \r\n                entries.push(currentNum);\r\n                console.log(\"----\");\r\n                console.log(\"Entries = \" + entries);\r\n                oldResult = entries.join(\"\");\r\n                //oldResult = currentNumDisplay;   \r\n                showMessage(true, \"\");\r\n                //$previousDisplay.html('<i style=\"font-size:0.7em;color:green\">'+oldResult+\"</i><br>\");\r\n                $presentDisplay.html(currentNumDisplay);\r\n\r\n               // oldResult = currentNumDisplay;   \r\n                console.log(\"Old Result = \" + oldResult);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        //check if last entry in entries[] is \".\"\r\n        else if (entries[entries.length - 1] == \".\") {\r\n            //last entry in entries is a dot\r\n            //remove '.'\r\n            entries.pop();\r\n            //remove last number in entries\r\n            lastNum = entries.pop();\r\n            //prepare formatted number\r\n            currentNumDisplay = lastNum + \".\" + currentNum;\r\n            //get formatted number to store in entries\r\n            currentNum = parseFloat(currentNumDisplay, 10);\r\n            entries.push(currentNum);\r\n            console.log(\"----\");\r\n            console.log(\"Entries = \" + entries);\r\n            //----------testing-----------\r\n            oldResult = entries.join(\"\");\r\n            showMessage(true, \"\");\r\n            //---------------------------\r\n            //console.log(\"----\");\r\n            //$display.html(currentNumDisplay);\r\n            $presentDisplay.html(currentNumDisplay);\r\n\r\n        }\r\n\r\n\r\n        else {\r\n            //if last entry in entries[] is not a number, \r\n            //it must be an operator or a new number\r\n\r\n            entries.push(currentNum);\r\n            console.log(\"----\");\r\n            console.log(\"Entries = \" + entries);\r\n            //----------testing-----------\r\n            oldResult = entries.join(\"\");\r\n        \r\n            //---------------------------\r\n            //previousDisplay.html('<i style=\"font-size:0.7em;color:green;\">'+oldResult+\"</i>\");\r\n            showMessage(true, \"\");\r\n            $presentDisplay.html(currentNum);\r\n            //oldResult += currentNum;\r\n            console.log(\"Old Result = \" + oldResult);\r\n        }\r\n    }\r\n\r\n    //else if button clicked was an operator\r\n    else if ($this.hasClass(\"op\")) {\r\n\r\n        currentOp = $this.text();\r\n        \r\n        oldResult += currentOp;\r\n        console.log(\"Current Op => \" + currentOp);\r\n\r\n        /*----------------------------------------------------\r\n        check if the operator was a null operator AC|CE|=\r\n        -----------------------------------------------------*/\r\n        if ($this.hasClass(\"null-op\")) {\r\n            //validation for decimal case\r\n            sameNumberDecimal = false;\r\n            //check if operator is an 'AC'\r\n            if (currentOp === \"AC\") {\r\n                //console.log(\"Inside if loop, Current Op = \" + currentOp);\r\n                //clear entries array\r\n                entries = [];\r\n                console.log(\"----\");\r\n                console.log(\"Entries = \" + entries);\r\n                //console.log(\"----\");\r\n                //clear screen display\r\n                //$display.html(\"\");\r\n                $previousDisplay.html(\"\");\r\n                $presentDisplay.html(\"\");\r\n\r\n                //clear currentNum, currentOp, oldresult\r\n                currentNum = 0;\r\n                currentOp = '';\r\n                oldResult = '';\r\n            }\r\n\r\n\r\n            //check if operator was a 'CE' \r\n            else if (currentOp === \"CE\") {\r\n                //if last entry in entries is a number\r\n                if ($.isNumeric(entries[entries.length - 1])) {\r\n                    //remove last number from entries\r\n                    entries.pop();\r\n                    //change - don't remove last operator from entries\r\n                    //entries.pop();\r\n                    console.log(\"----\");\r\n                    console.log(\"Entries = \" + entries);\r\n                    //console.log(\"----\");\r\n                    //reset currentOp,currentNum\r\n                    currentNum = 0;\r\n                    currentOp = '';\r\n                }\r\n                //if last entry in entries was not a number\r\n                else {\r\n                    //last entry is an operator, but don't remove it\r\n                    //entries.pop();\r\n                    console.log(\"----\");\r\n                    console.log(\"Entries = \" + entries);\r\n                    //console.log(\"----\");\r\n                    //reset currentOp,currentNum\r\n                    //currentNum = 0;\r\n                    currentOp = '';\r\n\r\n                }\r\n            }\r\n\r\n            //check if operator was an '='\r\n            else if (currentOp === \"=\") {\r\n                //calculate result from entries\r\n                var temp = 0;\r\n                oldResult = entries.join(\"\");\r\n                while (entries.length >= 3) {\r\n                    temp = calculate(entries[0], entries[1], entries[2]);\r\n                    entries.splice(0, 3, temp);\r\n                    console.log(\"----\");\r\n                    console.log(\"Entries = \" + entries);\r\n                    console.log(\"----\");\r\n                }\r\n                result = temp;\r\n                //$display.html(result);\r\n               // $previousDisplay.html(\"\");\r\n                //showMessage(true,\"\");\r\n                $presentDisplay.html(result);\r\n                //reset entries & current op\r\n                currentOp = '';\r\n                entries = [];\r\n                console.log(\"Entries = \" + entries);\r\n\r\n            }\r\n        }\r\n\r\n\r\n        /*----------------------------------------------------\r\n          check if operator was a unary operator SQRT|.\r\n        -----------------------------------------------------*/\r\n        else if ($this.hasClass(\"unary-op\")) {\r\n\r\n            //check if operator was a sqrt\r\n            if ($this.hasClass(\"sqrt\")) {\r\n                //validation for decimal case\r\n                sameNumberDecimal = false;\r\n                //check if last entry in entries was a number\r\n                if ($.isNumeric(entries[entries.length - 1])) {\r\n                    //if yes, get last number in entries\r\n                    lastNum = entries[entries.length - 1];\r\n                    //compute result of square root\r\n                    result = calculate(lastNum, \"sqrt\", 0);\r\n                    //show result on screen\r\n                    showMessage(true,\"\");\r\n                    //$previousDisplay.html('<i style=\"font-size:0.7em;color:green\">'+oldResult+\"</i><br>\");\r\n                    $presentDisplay.html(result);\r\n                    //reset everything\r\n                    entries = [];\r\n                    currentOp = '';\r\n                }\r\n\r\n                //if last entry was not a number\r\n                else {\r\n                    //discard the value of sqrt\r\n                    currentOp = '';\r\n                }\r\n            }\r\n\r\n            //check if operator was a dot\r\n            else if ($this.hasClass(\"dot\")) {\r\n                //check if last entry in entries was a number - only valid case\r\n                if ($.isNumeric(entries[entries.length - 1])) {\r\n                    console.log(\"Samenumberdecimal = \" + sameNumberDecimal);\r\n                    if(!sameNumberDecimal) {\r\n                        sameNumberDecimal = true;\r\n                        entries.push(\".\");                     \r\n                    }\r\n                    else {\r\n                    }\r\n                }\r\n\r\n                //else - last entry in entries is not a number - ignore\r\n\r\n            }\r\n        }\r\n\r\n        /*---------------------------------------------------------\r\n          check if the operator was a binary operator - +|-|*|/|%\r\n        ---------------------------------------------------------*/\r\n        else if ($this.hasClass(\"binary-op\")) {\r\n            \r\n            //validation for decimal case\r\n            sameNumberDecimal = false;\r\n\r\n            //check if last entry in entries is a number\r\n\r\n            if ($.isNumeric(entries[entries.length - 1])) {\r\n                //get what operator was pushed\r\n                if ($this.is(\"#add\")) {\r\n                    //if operator is +\r\n                    pushOperator(\"+\");\r\n                }\r\n\r\n                //if operator is '-' \r\n                else if ($this.is(\"#subtract\")) {\r\n                    //if operator is +\r\n                    pushOperator(\"-\");\r\n                }\r\n\r\n                //if operator is '*'\r\n                else if ($this.is(\"#multiply\")) {\r\n                    //if operator is +\r\n                    pushOperator(\"*\");\r\n   \r\n                }\r\n\r\n                //if operator is '/'\r\n                else if ($this.is(\"#divide\")) {\r\n                    //if operator is +\r\n                    pushOperator(\"/\");\r\n                } \r\n\r\n                else if ($this.is(\"#percent\")) {\r\n                    //if operator is +\r\n                    pushOperator(\"%\");\r\n                }\r\n\r\n\r\n            }\r\n\r\n            //else last entry in entries is not a number\r\n            else {\r\n\r\n                //last entry is an operator, pop it\r\n                lastOp = entries.pop();\r\n                 if ($this.is(\"#add\")) {\r\n                    //if operator is +\r\n                    pushOperator(\"+\");\r\n                }\r\n\r\n                //if operator is '-' \r\n                else if ($this.is(\"#subtract\")) {\r\n                    //if operator is -\r\n                    //CHANGES for negative numbers\r\n                    if(!entries.toString().length) {\r\n                        //if entries is emtpy\r\n                        entries.push(0);\r\n                        pushOperator(\"-\");\r\n                    }\r\n                    else {\r\n                        pushOperator(\"-\");\r\n                    }\r\n                }\r\n\r\n                //if operator is '*'\r\n                else if ($this.is(\"#multiply\")) {\r\n                    //if operator is +\r\n                    pushOperator(\"*\");\r\n   \r\n                }\r\n\r\n                //if operator is '/'\r\n                else if ($this.is(\"#divide\")) {\r\n                    //if operator is +\r\n                    pushOperator(\"/\");\r\n                } \r\n\r\n                else if ($this.is(\"#percent\")) {\r\n                    //if operator is +\r\n                    pushOperator(\"%\");\r\n                }\r\n\r\n                // if ($this.is(\"#add\")) {\r\n                //     //if operator is +\r\n                //     currentOp = '+';\r\n                //     entries.push(currentOp);\r\n                //     console.log(\"----\");\r\n                //     console.log(\"Entries = \" + entries);\r\n\r\n                //     //changes for new displays\r\n                //     //$previousDisplay.html('<i style=\"font-size:0.7em; color:green\">'+oldResult+\"</i>\");\r\n                //     console.log(\"Old Result = \" + oldResult);\r\n                //     //clear currentOp\r\n                //     currentOp = '';\r\n                // }\r\n\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n});\r\n"]}